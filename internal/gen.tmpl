{{ define "numeric"}}
// Code generated by internal/gen.tmpl, DO NOT EDIT.

package {{ .GenType.StringLower }}set

import (
    "sync"
    {{if eq .GenType 14 -}}
    "time"
    {{ end }}
)

type set struct {
    mu   sync.RWMutex
    data {{ .GenType.Data }}
}

// New create and return instance of {{ .GenType.StringLower }} set
func New({{ .GenType.StringLower }}s ...{{ .GenType.Type }}) *set {
    s := NewWithSize(len({{ .GenType.StringLower }}s))
    s.Adds({{ .GenType.StringLower }}s...)
    return s
}

// New create and return instance of {{ .GenType.StringLower }} set
func NewWithSize(size int) *set {
return &set {
        data: make({{ .GenType.Data }}, size),
    }
}

// Add item to the set.
func (s *set) Add(item {{ .GenType.Type }}) {
    s.mu.Lock()
    defer s.mu.Unlock()

    s.data[{{ .GenType.MapKey "item" }}] = {{ .GenType.MapValue "item" }}
}

// Add items to the set.
func (s *set) Adds(items ...{{ .GenType.Type }}) {
    s.mu.Lock()
    defer s.mu.Unlock()

    for _, item := range items {
        s.data[{{ .GenType.MapKey "item" }}] = {{ .GenType.MapValue "item" }}
    }
}

// Remove item from the set.
func (s *set) Remove(item {{ .GenType.Type }}) {
    s.mu.Lock()
    defer s.mu.Unlock()

    delete(s.data, {{ .GenType.MapKey "item" }})
}

// Remove items from the set.
func (s *set) Removes(items ...{{ .GenType.Type }}) {
    s.mu.Lock()
    defer s.mu.Unlock()

    for _, item := range items {
        delete(s.data, {{ .GenType.MapKey "item" }})
    }
}

// Exist determines whether the item is exists in the set.
func (s *set) Exist(item {{ .GenType.Type }}) bool {
    s.mu.RLock()
    defer s.mu.RUnlock()

    _, ok := s.data[{{ .GenType.MapKey "item" }}]
    return ok
}

// List convert set to an array.
func (s *set) List(item {{ .GenType.Type }}) []{{ .GenType.Type }} {
    s.mu.RLock()
    defer s.mu.RUnlock()

    i := 0
    l := make([]{{ .GenType.Type }}, len(s.data))
    {{- if eq (.GenType.MapValue "") "struct{}{}"}}
    for val := range s.data {
    {{ else  }}
    for _, val := range s.data {
    {{ end -}}
    l[i] = val
        i++
    }

    return l
}

{{ end }}