// Code generated by internal/gen.tmpl, DO NOT EDIT.

package stringset

import (
	"sync"
)

type set struct {
	mu   sync.RWMutex
	data map[string]struct{}
}

// New create and return instance of string set
func New(strings ...string) *set {
	s := NewWithSize(len(strings))
	s.Adds(strings...)
	return s
}

// New create and return instance of string set
func NewWithSize(size int) *set {
	return &set{
		data: make(map[string]struct{}, size),
	}
}

// Add item to the set.
func (s *set) Add(item string) {
	s.mu.Lock()
	defer s.mu.Unlock()

	s.data[item] = struct{}{}
}

// Add items to the set.
func (s *set) Adds(items ...string) {
	s.mu.Lock()
	defer s.mu.Unlock()

	for _, item := range items {
		s.data[item] = struct{}{}
	}
}

// Remove item from the set.
func (s *set) Remove(item string) {
	s.mu.Lock()
	defer s.mu.Unlock()

	delete(s.data, item)
}

// Remove items from the set.
func (s *set) Removes(items ...string) {
	s.mu.Lock()
	defer s.mu.Unlock()

	for _, item := range items {
		delete(s.data, item)
	}
}

// Exist determines whether the item is exists in the set.
func (s *set) Exist(item string) bool {
	s.mu.RLock()
	defer s.mu.RUnlock()

	_, ok := s.data[item]
	return ok
}

// List convert set to an array.
func (s *set) List(item string) []string {
	s.mu.RLock()
	defer s.mu.RUnlock()

	i := 0
	l := make([]string, len(s.data))
	for val := range s.data {
		l[i] = val
		i++
	}

	return l
}
